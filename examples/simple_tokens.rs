use std::{fs::File, time::Instant};

use string_combiner::{segment::Segment, StringCombiner};

fn main() {
    let segments: Vec<Segment> = ::serde_json::from_reader(
        File::open("./examples/data/live-game-streaming.json").expect("Failed to get data file"),
    )
    .expect("Failed to parse data file");

    let inputs = segments.into_iter().map(|Segment { key, value }| Segment {
        key,
        value: value.tokens,
    });

    let combiner = StringCombiner::default();

    let instant = Instant::now();
    let combined = combiner
        .concat_segments(inputs)
        .expect("Failed to concat segments");
    let combined = combined.iter().map(|t| t.id).collect::<Vec<_>>();

    println!("Elapsed: {:?}", instant.elapsed());

    let expected: &[i32] = &[
        5483, 4704, 11545, 2429, 15197, 3049, 3675, 9172, 1831, 5651, 1495, 16299, 29840, 30702,
        16623, 1838, 7682, 31134, 1831, 29558, 3115, 11, 37403, 234, 101, 42520, 13, 37403, 234,
        101, 42520, 13, 37403, 234, 101, 42520, 37403, 101, 42520, 37403, 234, 42520, 37403, 101,
        42520, 37403, 234, 101, 42520, 5651, 32376, 37403, 234, 101, 42168, 7080, 4261, 16270,
        4704, 7675, 8514, 1397, 15407, 14892, 30702, 16623, 1838, 4811, 7682, 6540, 9915, 17065,
        46516, 16104, 48189, 38650, 12623, 9790, 11193, 101, 39106, 13182, 39692, 2216, 32061,
        5690, 17590, 4285, 2785, 4744, 12012, 3049, 42848, 29004, 4241, 1517, 15805, 3638, 3049,
        9293, 24318, 1638, 46809, 25286, 10520, 42435, 20661, 16666, 15608, 16112, 14000, 4709,
        14981, 1098, 13507, 29004, 4241, 1517, 12619, 6170, 27930, 8514, 1397, 15407, 1638, 17448,
        7999, 4446, 2297, 27093, 26397, 20523, 22226, 2124, 25732, 8631, 11, 4296, 7047, 11193,
        29039, 28747, 43445, 10307, 1425, 4704, 7675, 2785, 8514, 1397, 15407, 2124, 12952, 3744,
        17448, 7999, 4446, 47236, 25130, 7080, 49453, 8844, 10474, 12952, 7034, 16283, 36436,
        26218, 14547, 1313, 31512, 6300, 25574, 38473, 1638, 3294, 30, 1191, 2366, 21697, 1831,
        11315, 6831, 11945, 10417, 37194, 34324, 40093, 11080, 41049, 254, 4279, 10614, 8761,
        29282, 3115, 37403, 234, 101, 42520, 13, 24290, 1098, 27387, 1894, 6587, 42520, 13248, 255,
        27644, 1831, 13, 10496, 33622, 5727, 42895, 13499, 8037, 8092, 2525, 2004, 4215, 28517, 30,
        9883, 20661, 16666, 15608, 16112, 14000, 4709, 14981, 1831, 6718, 10307, 15650, 5837, 30,
        4296, 43577, 42873, 9956, 16653, 105, 2124, 33940, 15463, 6918, 42004, 49406, 3404, 1831,
        29558, 1235, 13,
    ];
    assert_eq!(expected, &combined);
}
